

from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware

from pycoingecko import CoinGeckoAPI
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

from aiogram.dispatcher import FSMContext
from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text, state
from sqlighter import SQLighter


import config

storage = MemoryStorage()
api = CoinGeckoAPI()
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

#  –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = SQLighter('db.db')


class AddCoins(StatesGroup):
    coin = State()
    price = State()


# =====================================================================================================
# ====================================== –§–£–ù–ö–¶–´–ò ======================================================
# =====================================================================================================

# =====================================================================================================
# ====================================== –ü–†–ò–í–ï–¢–°–í–ò–ï ===================================================
# =====================================================================================================
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        course_btn = types.KeyboardButton(text="üí∞ –ö—É—Ä—Å")
        alerts_btn = types.KeyboardButton(text="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ")
        profile_btn = types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        keyboard.add(course_btn, alerts_btn, profile_btn)
        await message.answer(
            "<b>–ü—Ä–∏–≤–µ—Çüëã\n–Ø –±—É–¥—É –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.</b>",
            reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        course_btn = types.KeyboardButton(text="üí∞ –ö—É—Ä—Å")
        alerts_btn = types.KeyboardButton(text="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ")
        profile_btn = types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        keyboard.add(course_btn, alerts_btn, profile_btn)
        await message.answer(
            "<b>–ü—Ä–∏–≤–µ—Çüëã\n–Ø –±—É–¥—É –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.</b>",
            reply_markup=keyboard)


# =====================================================================================================
# ====================================== –ü–†–û–§–ò–õ–¨=======================================================
# =====================================================================================================
@dp.message_handler(Text(equals="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    user = await bot.get_chat(user_id)
    alerts = db.get_alerts(user_id)
    num_alerts = len(alerts)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = user.username
    first_name = user.first_name
    last_name = user.last_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    response += f"<b>–ù–∏–∫:</b> <code>{first_name if first_name else ''} {last_name if last_name else ''}</code>\n"
    response += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {'@' + username if username else '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>'}\n"
    response += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> <code>{num_alerts}</code>\n"

    await message.answer(response)


# =====================================================================================================
# ====================================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ ===============================================
# =====================================================================================================
@dp.message_handler(Text(equals="üí∞ –ö—É—Ä—Å"))
async def courser(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    buttons_curr = [
        types.InlineKeyboardButton(text="BTC", callback_data="btc"),
        types.InlineKeyboardButton(text="ETN", callback_data="etn"),
        types.InlineKeyboardButton(text="LTC", callback_data="ltc"),
        types.InlineKeyboardButton(text="–ï—â–µ", callback_data="more")

    ]
    keyboard.add(*buttons_curr)
    await message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text=["more", "back"])
async def more_btn(call: types.CallbackQuery):
    if call.data == "more":
        keyboard = types.InlineKeyboardMarkup()
        more_btn = [
            types.InlineKeyboardButton(text="TWT", callback_data="twt"),
            types.InlineKeyboardButton(text="BNB", callback_data="bnb"),
            types.InlineKeyboardButton(text="DOT", callback_data="dot"),
            types.InlineKeyboardButton(text="CAKE", callback_data="cake"),
            types.InlineKeyboardButton(text="üîô Back", callback_data="back")
        ]
        keyboard.add(*more_btn)
        await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)
        await call.answer()
        await call.message.delete()
    else:
        prev_keyboard = call.message.reply_markup
        keyboard = types.InlineKeyboardMarkup()
        buttons_curr = [
            types.InlineKeyboardButton(text="BTC", callback_data="btc"),
            types.InlineKeyboardButton(text="ETN", callback_data="etn"),
            types.InlineKeyboardButton(text="LTC", callback_data="ltc"),
            types.InlineKeyboardButton(text="–ï—â–µ", callback_data="more")

        ]
        keyboard.add(*buttons_curr)
        await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)
        await call.answer()
        await call.message.delete()


# =====================================================================================================
# ====================================== –û–ü–û–í–ï–©–ï–ù–ò–ï ===================================================
# =====================================================================================================
@dp.message_handler(Text(equals="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ"))
async def courser(message: types.Message):
    if not db.alerts_exists(message.from_user.id):
        keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="create"),
            # types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")
        ]
        keyboard.add(*buttons)
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)
    else:
        records = db.get_alerts(message.from_user.id)
        if len(records):
            answer = (f"üîî<b>–í–∞—à–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n")
            for r in records:
                answer += f"ü™ô <b>{r[2]}</b>\n"
                answer += f"  <b>L</b> <code>{r[3]}</code> <b>USD</b>\n"

            keyboard = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="create"),
                types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")
            ]
            keyboard.add(*buttons)
            await message.answer(answer, reply_markup=keyboard)


# =====================================================================================================
# ====================================== –£–î–ê–õ–ï–ù–ò–ï =====================================================
# =====================================================================================================
@dp.callback_query_handler(text="delete")
async def delete(call: types.CallbackQuery):
    user_id = call.from_user.id
    data = db.get_alerts(user_id)
    keyboard = types.InlineKeyboardMarkup()
    button_list = [types.InlineKeyboardButton(f"ü™ô {x[2]}/{x[3]} USD", callback_data=f"del_{x[0]}") for x in data]
    keyboard.add(*button_list)

    await call.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>", reply_markup=keyboard)
    await call.message.delete()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('del_'))
async def process_callback_delete(callback_query: types.CallbackQuery):
    alert_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    db.delete_alert(int(alert_id))

    # –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_data = db.get_alerts(user_id)

    # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = types.InlineKeyboardMarkup()
    button_list = [types.InlineKeyboardButton(f"ü™ô {x[2]}/{x[3]} USD", callback_data=f"del_{x[0]}") for x in
                   updated_data]
    keyboard.add(*button_list)

    await callback_query.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>", reply_markup=keyboard)
    await callback_query.message.delete()
    await callback_query.answer()
    # –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # db.update_alerts(user_id, updated_data)

    await bot.answer_callback_query(callback_query.id, text="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")


# =====================================================================================================
# ====================================== –°–û–ó–î–ê–ù–ò–ï =====================================================
# =====================================================================================================
# @dp.callback_query_handler(text="create")
# async def add_coins(call: types.CallbackQuery):
#     await AddCoins.coin.set()
#     await call.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É BTC, ETH, BNB –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é.")
#     await call.message.delete()
#     await call.answer()
#
#
# @dp.message_handler(state=AddCoins.coin)
# async def get_coins(message: types.Message, state: FSMContext):
#     answer = message.text
#     coin_list = api.get_coins_list()
#
#     if test_coin(answer, coin_list):
#         await state.update_data(answer1=answer)
#         await AddCoins.next()
#         await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.</b>\n\n"
#                              "<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–Ω - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.</b>\n\n"
#                              "<b>20000 30000</b>")
#
#     else:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã.")
#
#
def test_coin(coin_title: str, coins_list: list) -> bool:
    for coiny in coins_list:
        if coin_title.lower() == coiny.get('symbol').lower():
            return True
    return False


class CancelMiddleware(LifetimeControllerMiddleware):
    skip_patterns = ["error", "update"]

    async def pre_process(self, obj, data, *args):
        if isinstance(obj, types.Message) and obj.text == "/cancel":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            course_btn = types.KeyboardButton(text="üí∞ –ö—É—Ä—Å")
            alerts_btn = types.KeyboardButton(text="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ")
            profile_btn = types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            keyboard.add(course_btn, alerts_btn, profile_btn)
            await obj.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                             reply_markup=keyboard)
            await state.finish()


@dp.callback_query_handler(text="create")
async def add_coins(call: types.CallbackQuery):
    await AddCoins.coin.set()
    await call.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É BTC, ETH, BNB –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é.")
    await call.message.delete()
    await call.answer()


@dp.message_handler(state=AddCoins.coin)
async def get_coins(message: types.Message, state: FSMContext):
    answer = message.text
    coin_list = api.get_coins_list()

    if test_coin(answer, coin_list):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        course_btn = types.KeyboardButton(text="üí∞ –ö—É—Ä—Å")
        alerts_btn = types.KeyboardButton(text="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ")
        profile_btn = types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        keyboard.add(course_btn, alerts_btn, profile_btn)
        await state.update_data(answer1=answer)
        await AddCoins.next()
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.</b>\n\n"
                             "<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–Ω - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.</b>\n\n"
                             "<b>20000 30000</b>", reply_markup=keyboard)

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        course_btn = types.KeyboardButton(text="üí∞ –ö—É—Ä—Å")
        alerts_btn = types.KeyboardButton(text="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ")
        profile_btn = types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        keyboard.add(course_btn, alerts_btn, profile_btn)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã.", reply_markup=keyboard)


@dp.message_handler(state=AddCoins.price)
async def get_price(message: types.Message, state: FSMContext):
    res = db.get_alerts(message.from_user.id)
    data = await state.get_data()
    answer1 = data.get("answer1")
    answer2 = message.text
    if len(res) >= 5:
        await message.answer('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!')
    elif answer2.isdigit():
        db.add_alerts(message.from_user.id, answer1, answer2)
        keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="create"),
            types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")
        ]
        btn_view = [
            types.InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="view_alerts")
        ]
        keyboard.add(*buttons)
        keyboard.add(*btn_view)
        await message.answer(f"<b>–í–∞—à–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ‚úÖ</b>\n"
                             f"ü™ô <b>{answer1}</b>\n"
                             f"  <b>L</b> <code>{answer2}</code> <b>USD</b>", reply_markup=keyboard)
        await state.finish()

    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã!")


# =====================================================================================================
# ====================================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–£–†–°–ê –í–ê–õ–Æ–¢ ========================================
# =====================================================================================================
@dp.callback_query_handler(text="btc")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='bitcoin', vs_currencies='usd')["bitcoin"]["usd"]
    await call.message.answer(f" 1 BTC = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    buttons_curr = [
        types.InlineKeyboardButton(text="BTC", callback_data="btc"),
        types.InlineKeyboardButton(text="ETN", callback_data="etn"),
        types.InlineKeyboardButton(text="LTC", callback_data="ltc"),
        types.InlineKeyboardButton(text="–ï—â–µ", callback_data="more")

    ]
    keyboard.add(*buttons_curr)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="etn")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='ethereum', vs_currencies='usd')["ethereum"]["usd"]
    await call.message.answer(f" 1 ETN = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    buttons_curr = [
        types.InlineKeyboardButton(text="BTC", callback_data="btc"),
        types.InlineKeyboardButton(text="ETN", callback_data="etn"),
        types.InlineKeyboardButton(text="LTC", callback_data="ltc"),
        types.InlineKeyboardButton(text="–ï—â–µ", callback_data="more")

    ]
    keyboard.add(*buttons_curr)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="ltc")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='litecoin', vs_currencies='usd')["litecoin"]["usd"]
    await call.message.answer(f" 1 LTC = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    buttons_curr = [
        types.InlineKeyboardButton(text="BTC", callback_data="btc"),
        types.InlineKeyboardButton(text="ETN", callback_data="etn"),
        types.InlineKeyboardButton(text="LTC", callback_data="ltc"),
        types.InlineKeyboardButton(text="–ï—â–µ", callback_data="more")

    ]
    keyboard.add(*buttons_curr)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="twt")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='trust-wallet-token', vs_currencies='usd')["trust-wallet-token"]["usd"]
    await call.message.answer(f" 1 TWT = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    more_btn = [
        types.InlineKeyboardButton(text="TWT", callback_data="twt"),
        types.InlineKeyboardButton(text="BNB", callback_data="bnb"),
        types.InlineKeyboardButton(text="DOT", callback_data="dot"),
        types.InlineKeyboardButton(text="CAKE", callback_data="cake"),
        types.InlineKeyboardButton(text="üîô Back", callback_data="back")
    ]
    keyboard.add(*more_btn)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="bnb")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='binancecoin', vs_currencies='usd')["binancecoin"]["usd"]
    await call.message.answer(f" 1 BNB = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    more_btn = [
        types.InlineKeyboardButton(text="TWT", callback_data="twt"),
        types.InlineKeyboardButton(text="BNB", callback_data="bnb"),
        types.InlineKeyboardButton(text="DOT", callback_data="dot"),
        types.InlineKeyboardButton(text="CAKE", callback_data="cake"),
        types.InlineKeyboardButton(text="üîô Back", callback_data="back")
    ]
    keyboard.add(*more_btn)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="dot")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='polkadot', vs_currencies='usd')["polkadot"]["usd"]
    await call.message.answer(f" 1 DOT = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    more_btn = [
        types.InlineKeyboardButton(text="TWT", callback_data="twt"),
        types.InlineKeyboardButton(text="BNB", callback_data="bnb"),
        types.InlineKeyboardButton(text="DOT", callback_data="dot"),
        types.InlineKeyboardButton(text="CAKE", callback_data="cake"),
        types.InlineKeyboardButton(text="üîô Back", callback_data="back")
    ]
    keyboard.add(*more_btn)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


@dp.callback_query_handler(text="cake")
async def send_random_value(call: types.CallbackQuery):
    price = api.get_price(ids='pancakeswap-token', vs_currencies='usd')["pancakeswap-token"]["usd"]
    await call.message.answer(f" 1 CAKE = {price}")
    await call.message.delete()
    await call.answer()
    keyboard = types.InlineKeyboardMarkup()
    more_btn = [
        types.InlineKeyboardButton(text="TWT", callback_data="twt"),
        types.InlineKeyboardButton(text="BNB", callback_data="bnb"),
        types.InlineKeyboardButton(text="DOT", callback_data="dot"),
        types.InlineKeyboardButton(text="CAKE", callback_data="cake"),
        types.InlineKeyboardButton(text="üîô Back", callback_data="back")
    ]
    keyboard.add(*more_btn)
    await call.message.answer("ü§ë–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éü§ë", reply_markup=keyboard)


# @dp.message_handler()
# async def echo_message(msg: types.Message):
#     await bot.send_message(msg.from_user.id, msg.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
